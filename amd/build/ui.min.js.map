{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * CodeHighlighter for TinyMCE.\n *\n * @module      tiny_insertcode/ui\n * @copyright   2023 Nov <m.kowalski.nov7@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport HighlighterModal from './modal';\n\n// import {debounce} from 'core/utils';\n\n/**\n * Handle action.\n *\n * @param {TinyMCE} editor\n */\n\nexport const handleAction = (editor) => {\n    displayDialog(editor);\n};\n\n/**\n * displayDialog.\n *\n * @param {TinyMCE} editor\n * @returns {Promise<void>}\n */\n\nconst displayDialog = async(editor) => {\n    const modal = await ModalFactory.create({\n        type: HighlighterModal.TYPE,\n        templateContext: Object.assign({}, {elementid: editor.id,}, {}),\n        large: true,\n    });\n    modal.show();\n    const $root = await modal.getRoot();\n\n\n    let sel = editor.selection.getNode();\n    let codeHLTag = getCodeHLTag(sel);\n    if(codeHLTag && codeHLTag.querySelectorAll('TD')) {\n        const item = document.getElementById('id_content_editor_tiny_insertcode');\n        item.value = codeHLTag.querySelectorAll('TD')[1].innerText;\n        let lan = document.getElementById('id_content_editor_tiny_insertcode_langugage');\n        let detectedLang = codeHLTag.classList.value.match(/chLang_\\S+/g)[0].slice(7);\n        window.console.log(detectedLang);\n        lan.value = detectedLang;\n\n    }\n\n    $root.on(ModalEvents.hidden, () => {\n        modal.destroy();\n    });\n\n    $root.on(ModalEvents.save, () => {\n        if(codeHLTag) {\n            codeHLTag.remove();\n        }\n        insertCode(editor);\n    });\n};\n\n/**\n * Get selected Code.\n * @param {HTMLElement} node\n * @returns {string}\n */\n\nexport const getCodeHLTag = (node) => {\n    while(node && !node.classList.contains(\"codehl\")) {node = node.parentElement;}\n    return node;\n};\n\n\n/**\n * Handle insertion of a new equation, or update of an existing one.\n * @param {TinyMCE} editor\n */\n\nexport const insertCode = (editor) => {\n    const item = document.getElementById('id_content_editor_tiny_insertcode');\n    let lan = document.getElementById('id_content_editor_tiny_insertcode_langugage');\n    const getSelectedText = (e) => {\n        if (e.selectedIndex === -1) {return null;}\n        return e.options[e.selectedIndex].text;\n    };\n\n    let splitted = item.value.split(/\\r?\\n/);\n    let lineNumbers = \"\", codeLines = \"\";\n    let lineNumer = 1;\n    let content = \"\";\n    content += '<div class=\"codehl chLang_'+lan.value+'\">';\n    content += '<table class=\"normal mce-item-table\"><thead><tr><th colspan=\"2\"><span class=\"title\"></span>';\n    content += '<span class=\"language\"><b>['+getSelectedText(lan);\n    content +=']</b></span></th></tr></thead><tbody><tr><td>';\n\n    window.console.log(\"Language \"+lan.value);\n\n    for(let el in splitted)\n    {\n        lineNumbers += \"<pre>\"+(lineNumer++)+\"</pre>\";\n        codeLines += \"<pre>\"+splitted[el]+\"</pre>\";\n    }\n    content += lineNumbers;\n    content += '</td><td>';\n    content += codeLines;\n    content += '</td></tr></tbody>';\n    content += '<tfoot><tr><td colspan=\"2\"><span class=\"version\">InsertCode ver. 3.0.2</span></td></tr></tfoot>';\n    content += '</table></div></div><br/>';\n\n    editor.insertContent(content);\n};"],"names":["editor","displayDialog","async","modal","ModalFactory","create","type","HighlighterModal","TYPE","templateContext","Object","assign","elementid","id","large","show","$root","getRoot","sel","selection","getNode","codeHLTag","getCodeHLTag","querySelectorAll","document","getElementById","value","innerText","lan","detectedLang","classList","match","slice","window","console","log","on","ModalEvents","hidden","destroy","save","remove","insertCode","node","contains","parentElement","item","splitted","split","lineNumbers","codeLines","lineNumer","content","e","selectedIndex","options","text","el","insertContent"],"mappings":";;;;;;;0SAmC6BA,SACzBC,cAAcD,eAUZC,cAAgBC,MAAAA,eACZC,YAAcC,uBAAaC,OAAO,CACpCC,KAAMC,eAAiBC,KACvBC,gBAAiBC,OAAOC,OAAO,GAAI,CAACC,UAAWZ,OAAOa,IAAM,IAC5DC,OAAO,IAEXX,MAAMY,aACAC,YAAcb,MAAMc,cAGtBC,IAAMlB,OAAOmB,UAAUC,UACvBC,UAAYC,aAAaJ,QAC1BG,WAAaA,UAAUE,iBAAiB,MAAO,CACjCC,SAASC,eAAe,qCAChCC,MAAQL,UAAUE,iBAAiB,MAAM,GAAGI,cAC7CC,IAAMJ,SAASC,eAAe,+CAC9BI,aAAeR,UAAUS,UAAUJ,MAAMK,MAAM,eAAe,GAAGC,MAAM,GAC3EC,OAAOC,QAAQC,IAAIN,cACnBD,IAAIF,MAAQG,aAIhBb,MAAMoB,GAAGC,sBAAYC,QAAQ,KACzBnC,MAAMoC,aAGVvB,MAAMoB,GAAGC,sBAAYG,MAAM,KACpBnB,WACCA,UAAUoB,SAEdC,WAAW1C,YAUNsB,aAAgBqB,YACnBA,OAASA,KAAKb,UAAUc,SAAS,WAAYD,KAAOA,KAAKE,qBACxDF,+CASED,WAAc1C,eACjB8C,KAAOtB,SAASC,eAAe,yCACjCG,IAAMJ,SAASC,eAAe,mDAM9BsB,SAAWD,KAAKpB,MAAMsB,MAAM,SAC5BC,YAAc,GAAIC,UAAY,GAC9BC,UAAY,EACZC,QAAU,GARWC,IAAAA,EASzBD,SAAW,6BAA6BxB,IAAIF,MAAM,KAClD0B,SAAW,8FACXA,SAAW,gCAVkB,KADJC,EAWgCzB,KAV/C0B,cAA8B,KAC7BD,EAAEE,QAAQF,EAAEC,eAAeE,MAUtCJ,SAAU,gDAEVnB,OAAOC,QAAQC,IAAI,YAAYP,IAAIF,WAE/B,IAAI+B,MAAMV,SAEVE,aAAe,QAASE,YAAa,SACrCD,WAAa,QAAQH,SAASU,IAAI,SAEtCL,SAAWH,YACXG,SAAW,YACXA,SAAWF,UACXE,SAAW,qBACXA,SAAW,kGACXA,SAAW,4BAEXpD,OAAO0D,cAAcN"}